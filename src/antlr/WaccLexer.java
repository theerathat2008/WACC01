// Generated from ./WaccLexer.g4 by ANTLR 4.4
package antlr;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class WaccLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		COMMENT=1, WHITESPACE=2, NEWLINE=3, EOL=4, BEGIN=5, END=6, IS=7, COMMA=8, 
		SKIP=9, EQUAL=10, READ=11, FREE=12, RETURN=13, EXIT=14, PRINT=15, PRINTLN=16, 
		IF=17, THEN=18, ELSE=19, FI=20, WHILE=21, DO=22, DONE=23, SEMI_COLON=24, 
		NEWPAIR=25, CALL=26, FST=27, SND=28, INT_STRING=29, BOOL_STRING=30, CHAR_STRING=31, 
		STRING_STRING=32, SQUARE_OPEN=33, SQUARE_CLOSED=34, PAIR_STRING=35, OPEN_PAREN=36, 
		CLOSE_PAREN=37, UNARY_OPER=38, BINARY_OPER=39, INT_SIGN=40, BOOL_LITER=41, 
		CHAR_LITER=42, STR_LITER=43, CHARACTER=44, ESCAPED_CHAR=45, PAIR_LITER=46, 
		IDENT=47, INTEGER=48, INT_LITER=49;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"'\\u0000'", "'\\u0001'", "'\\u0002'", "'\\u0003'", "'\\u0004'", "'\\u0005'", 
		"'\\u0006'", "'\\u0007'", "'\b'", "'\t'", "'\n'", "'\\u000B'", "'\f'", 
		"'\r'", "'\\u000E'", "'\\u000F'", "'\\u0010'", "'\\u0011'", "'\\u0012'", 
		"'\\u0013'", "'\\u0014'", "'\\u0015'", "'\\u0016'", "'\\u0017'", "'\\u0018'", 
		"'\\u0019'", "'\\u001A'", "'\\u001B'", "'\\u001C'", "'\\u001D'", "'\\u001E'", 
		"'\\u001F'", "' '", "'!'", "'\"'", "'#'", "'$'", "'%'", "'&'", "'''", 
		"'('", "')'", "'*'", "'+'", "','", "'-'", "'.'", "'/'", "'0'", "'1'"
	};
	public static final String[] ruleNames = {
		"COMMENT", "WHITESPACE", "NEWLINE", "EOL", "BEGIN", "END", "IS", "COMMA", 
		"SKIP", "EQUAL", "READ", "FREE", "RETURN", "EXIT", "PRINT", "PRINTLN", 
		"IF", "THEN", "ELSE", "FI", "WHILE", "DO", "DONE", "SEMI_COLON", "NEWPAIR", 
		"CALL", "FST", "SND", "INT_STRING", "BOOL_STRING", "CHAR_STRING", "STRING_STRING", 
		"SQUARE_OPEN", "SQUARE_CLOSED", "PAIR_STRING", "OPEN_PAREN", "CLOSE_PAREN", 
		"UNARY_OPER", "BINARY_OPER", "INT_SIGN", "BOOL_LITER", "CHAR_LITER", "STR_LITER", 
		"CHARACTER", "ESCAPED_CHAR", "PAIR_LITER", "IDENT", "DIGIT", "INTEGER", 
		"INT_LITER"
	};


	public WaccLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "WaccLexer.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\63\u016d\b\1\4\2"+
		"\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4"+
		"\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22"+
		"\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31"+
		"\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t"+
		" \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t"+
		"+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\3\2"+
		"\3\2\7\2j\n\2\f\2\16\2m\13\2\3\2\5\2p\n\2\3\2\3\2\3\2\3\2\3\3\3\3\3\4"+
		"\5\4y\n\4\3\4\3\4\6\4}\n\4\r\4\16\4~\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\6\3"+
		"\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\t\3\t\3\n\3\n\3\n\3\n"+
		"\3\n\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\16"+
		"\3\16\3\16\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20"+
		"\3\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\23\3\23"+
		"\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\25\3\25\3\25\3\26\3\26\3\26"+
		"\3\26\3\26\3\26\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\31\3\31\3\32"+
		"\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3\34\3\34"+
		"\3\34\3\34\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37"+
		"\3\37\3 \3 \3 \3 \3 \3!\3!\3!\3!\3!\3!\3!\3\"\3\"\3#\3#\3$\3$\3$\3$\3"+
		"$\3%\3%\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u0123\n\'\3"+
		"(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\5(\u0133\n(\3)\3)\3*\3*\3*\3"+
		"*\3*\3*\3*\3*\3*\5*\u0140\n*\3+\3+\3+\3+\3,\3,\7,\u0148\n,\f,\16,\u014b"+
		"\13,\3,\3,\3-\3-\3-\5-\u0152\n-\3.\3.\3/\3/\3/\3/\3/\3\60\3\60\7\60\u015d"+
		"\n\60\f\60\16\60\u0160\13\60\3\61\3\61\3\62\6\62\u0165\n\62\r\62\16\62"+
		"\u0166\3\63\5\63\u016a\n\63\3\63\3\63\2\2\64\3\3\5\4\7\5\t\6\13\7\r\b"+
		"\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26"+
		"+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S"+
		"+U,W-Y.[/]\60_\61a\2c\62e\63\3\2\13\4\2\f\f\17\17\4\2\13\13\"\"\4\2##"+
		"//\7\2\'\',-//\61\61@@\4\2--//\5\2$$))^^\13\2$$))\62\62^^ddhhppttvv\5"+
		"\2C\\aac|\6\2\62;C\\aac|\u0180\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t"+
		"\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2"+
		"\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2"+
		"\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2"+
		"+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2"+
		"\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2"+
		"C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3"+
		"\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2"+
		"\2\2]\3\2\2\2\2_\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\3g\3\2\2\2\5u\3\2\2\2\7"+
		"|\3\2\2\2\t\u0082\3\2\2\2\13\u0087\3\2\2\2\r\u008d\3\2\2\2\17\u0091\3"+
		"\2\2\2\21\u0094\3\2\2\2\23\u0096\3\2\2\2\25\u009b\3\2\2\2\27\u009d\3\2"+
		"\2\2\31\u00a2\3\2\2\2\33\u00a7\3\2\2\2\35\u00ae\3\2\2\2\37\u00b3\3\2\2"+
		"\2!\u00b9\3\2\2\2#\u00c1\3\2\2\2%\u00c4\3\2\2\2\'\u00c9\3\2\2\2)\u00ce"+
		"\3\2\2\2+\u00d1\3\2\2\2-\u00d7\3\2\2\2/\u00da\3\2\2\2\61\u00df\3\2\2\2"+
		"\63\u00e1\3\2\2\2\65\u00e9\3\2\2\2\67\u00ee\3\2\2\29\u00f2\3\2\2\2;\u00f6"+
		"\3\2\2\2=\u00fa\3\2\2\2?\u00ff\3\2\2\2A\u0104\3\2\2\2C\u010b\3\2\2\2E"+
		"\u010d\3\2\2\2G\u010f\3\2\2\2I\u0114\3\2\2\2K\u0116\3\2\2\2M\u0122\3\2"+
		"\2\2O\u0132\3\2\2\2Q\u0134\3\2\2\2S\u013f\3\2\2\2U\u0141\3\2\2\2W\u0145"+
		"\3\2\2\2Y\u0151\3\2\2\2[\u0153\3\2\2\2]\u0155\3\2\2\2_\u015a\3\2\2\2a"+
		"\u0161\3\2\2\2c\u0164\3\2\2\2e\u0169\3\2\2\2gk\7%\2\2hj\n\2\2\2ih\3\2"+
		"\2\2jm\3\2\2\2ki\3\2\2\2kl\3\2\2\2lo\3\2\2\2mk\3\2\2\2np\7\17\2\2on\3"+
		"\2\2\2op\3\2\2\2pq\3\2\2\2qr\7\f\2\2rs\3\2\2\2st\b\2\2\2t\4\3\2\2\2uv"+
		"\t\3\2\2v\6\3\2\2\2wy\7\17\2\2xw\3\2\2\2xy\3\2\2\2yz\3\2\2\2z}\7\f\2\2"+
		"{}\7\17\2\2|x\3\2\2\2|{\3\2\2\2}~\3\2\2\2~|\3\2\2\2~\177\3\2\2\2\177\u0080"+
		"\3\2\2\2\u0080\u0081\b\4\2\2\u0081\b\3\2\2\2\u0082\u0083\7^\2\2\u0083"+
		"\u0084\7p\2\2\u0084\u0085\3\2\2\2\u0085\u0086\b\5\2\2\u0086\n\3\2\2\2"+
		"\u0087\u0088\7d\2\2\u0088\u0089\7g\2\2\u0089\u008a\7i\2\2\u008a\u008b"+
		"\7k\2\2\u008b\u008c\7p\2\2\u008c\f\3\2\2\2\u008d\u008e\7g\2\2\u008e\u008f"+
		"\7p\2\2\u008f\u0090\7f\2\2\u0090\16\3\2\2\2\u0091\u0092\7k\2\2\u0092\u0093"+
		"\7u\2\2\u0093\20\3\2\2\2\u0094\u0095\7.\2\2\u0095\22\3\2\2\2\u0096\u0097"+
		"\7u\2\2\u0097\u0098\7m\2\2\u0098\u0099\7k\2\2\u0099\u009a\7r\2\2\u009a"+
		"\24\3\2\2\2\u009b\u009c\7?\2\2\u009c\26\3\2\2\2\u009d\u009e\7t\2\2\u009e"+
		"\u009f\7g\2\2\u009f\u00a0\7c\2\2\u00a0\u00a1\7f\2\2\u00a1\30\3\2\2\2\u00a2"+
		"\u00a3\7h\2\2\u00a3\u00a4\7t\2\2\u00a4\u00a5\7g\2\2\u00a5\u00a6\7g\2\2"+
		"\u00a6\32\3\2\2\2\u00a7\u00a8\7t\2\2\u00a8\u00a9\7g\2\2\u00a9\u00aa\7"+
		"v\2\2\u00aa\u00ab\7w\2\2\u00ab\u00ac\7t\2\2\u00ac\u00ad\7p\2\2\u00ad\34"+
		"\3\2\2\2\u00ae\u00af\7g\2\2\u00af\u00b0\7z\2\2\u00b0\u00b1\7k\2\2\u00b1"+
		"\u00b2\7v\2\2\u00b2\36\3\2\2\2\u00b3\u00b4\7r\2\2\u00b4\u00b5\7t\2\2\u00b5"+
		"\u00b6\7k\2\2\u00b6\u00b7\7p\2\2\u00b7\u00b8\7v\2\2\u00b8 \3\2\2\2\u00b9"+
		"\u00ba\7r\2\2\u00ba\u00bb\7t\2\2\u00bb\u00bc\7k\2\2\u00bc\u00bd\7p\2\2"+
		"\u00bd\u00be\7v\2\2\u00be\u00bf\7n\2\2\u00bf\u00c0\7p\2\2\u00c0\"\3\2"+
		"\2\2\u00c1\u00c2\7k\2\2\u00c2\u00c3\7h\2\2\u00c3$\3\2\2\2\u00c4\u00c5"+
		"\7v\2\2\u00c5\u00c6\7j\2\2\u00c6\u00c7\7g\2\2\u00c7\u00c8\7p\2\2\u00c8"+
		"&\3\2\2\2\u00c9\u00ca\7g\2\2\u00ca\u00cb\7n\2\2\u00cb\u00cc\7u\2\2\u00cc"+
		"\u00cd\7g\2\2\u00cd(\3\2\2\2\u00ce\u00cf\7h\2\2\u00cf\u00d0\7k\2\2\u00d0"+
		"*\3\2\2\2\u00d1\u00d2\7y\2\2\u00d2\u00d3\7j\2\2\u00d3\u00d4\7k\2\2\u00d4"+
		"\u00d5\7n\2\2\u00d5\u00d6\7g\2\2\u00d6,\3\2\2\2\u00d7\u00d8\7f\2\2\u00d8"+
		"\u00d9\7q\2\2\u00d9.\3\2\2\2\u00da\u00db\7f\2\2\u00db\u00dc\7q\2\2\u00dc"+
		"\u00dd\7p\2\2\u00dd\u00de\7g\2\2\u00de\60\3\2\2\2\u00df\u00e0\7=\2\2\u00e0"+
		"\62\3\2\2\2\u00e1\u00e2\7p\2\2\u00e2\u00e3\7g\2\2\u00e3\u00e4\7y\2\2\u00e4"+
		"\u00e5\7r\2\2\u00e5\u00e6\7c\2\2\u00e6\u00e7\7k\2\2\u00e7\u00e8\7t\2\2"+
		"\u00e8\64\3\2\2\2\u00e9\u00ea\7e\2\2\u00ea\u00eb\7c\2\2\u00eb\u00ec\7"+
		"n\2\2\u00ec\u00ed\7n\2\2\u00ed\66\3\2\2\2\u00ee\u00ef\7h\2\2\u00ef\u00f0"+
		"\7u\2\2\u00f0\u00f1\7v\2\2\u00f18\3\2\2\2\u00f2\u00f3\7u\2\2\u00f3\u00f4"+
		"\7p\2\2\u00f4\u00f5\7f\2\2\u00f5:\3\2\2\2\u00f6\u00f7\7k\2\2\u00f7\u00f8"+
		"\7p\2\2\u00f8\u00f9\7v\2\2\u00f9<\3\2\2\2\u00fa\u00fb\7d\2\2\u00fb\u00fc"+
		"\7q\2\2\u00fc\u00fd\7q\2\2\u00fd\u00fe\7n\2\2\u00fe>\3\2\2\2\u00ff\u0100"+
		"\7e\2\2\u0100\u0101\7j\2\2\u0101\u0102\7c\2\2\u0102\u0103\7t\2\2\u0103"+
		"@\3\2\2\2\u0104\u0105\7u\2\2\u0105\u0106\7v\2\2\u0106\u0107\7t\2\2\u0107"+
		"\u0108\7k\2\2\u0108\u0109\7p\2\2\u0109\u010a\7i\2\2\u010aB\3\2\2\2\u010b"+
		"\u010c\7]\2\2\u010cD\3\2\2\2\u010d\u010e\7_\2\2\u010eF\3\2\2\2\u010f\u0110"+
		"\7r\2\2\u0110\u0111\7c\2\2\u0111\u0112\7k\2\2\u0112\u0113\7t\2\2\u0113"+
		"H\3\2\2\2\u0114\u0115\7*\2\2\u0115J\3\2\2\2\u0116\u0117\7+\2\2\u0117L"+
		"\3\2\2\2\u0118\u0123\t\4\2\2\u0119\u011a\7n\2\2\u011a\u011b\7g\2\2\u011b"+
		"\u0123\7p\2\2\u011c\u011d\7q\2\2\u011d\u011e\7t\2\2\u011e\u0123\7f\2\2"+
		"\u011f\u0120\7e\2\2\u0120\u0121\7j\2\2\u0121\u0123\7t\2\2\u0122\u0118"+
		"\3\2\2\2\u0122\u0119\3\2\2\2\u0122\u011c\3\2\2\2\u0122\u011f\3\2\2\2\u0123"+
		"N\3\2\2\2\u0124\u0133\t\5\2\2\u0125\u0126\7@\2\2\u0126\u0133\7?\2\2\u0127"+
		"\u0133\7>\2\2\u0128\u0129\7>\2\2\u0129\u0133\7?\2\2\u012a\u012b\7?\2\2"+
		"\u012b\u0133\7?\2\2\u012c\u012d\7#\2\2\u012d\u0133\7?\2\2\u012e\u012f"+
		"\7(\2\2\u012f\u0133\7(\2\2\u0130\u0131\7~\2\2\u0131\u0133\7~\2\2\u0132"+
		"\u0124\3\2\2\2\u0132\u0125\3\2\2\2\u0132\u0127\3\2\2\2\u0132\u0128\3\2"+
		"\2\2\u0132\u012a\3\2\2\2\u0132\u012c\3\2\2\2\u0132\u012e\3\2\2\2\u0132"+
		"\u0130\3\2\2\2\u0133P\3\2\2\2\u0134\u0135\t\6\2\2\u0135R\3\2\2\2\u0136"+
		"\u0137\7v\2\2\u0137\u0138\7t\2\2\u0138\u0139\7w\2\2\u0139\u0140\7g\2\2"+
		"\u013a\u013b\7h\2\2\u013b\u013c\7c\2\2\u013c\u013d\7n\2\2\u013d\u013e"+
		"\7u\2\2\u013e\u0140\7g\2\2\u013f\u0136\3\2\2\2\u013f\u013a\3\2\2\2\u0140"+
		"T\3\2\2\2\u0141\u0142\7)\2\2\u0142\u0143\5Y-\2\u0143\u0144\7)\2\2\u0144"+
		"V\3\2\2\2\u0145\u0149\7$\2\2\u0146\u0148\5Y-\2\u0147\u0146\3\2\2\2\u0148"+
		"\u014b\3\2\2\2\u0149\u0147\3\2\2\2\u0149\u014a\3\2\2\2\u014a\u014c\3\2"+
		"\2\2\u014b\u0149\3\2\2\2\u014c\u014d\7$\2\2\u014dX\3\2\2\2\u014e\u0152"+
		"\n\7\2\2\u014f\u0150\7^\2\2\u0150\u0152\5[.\2\u0151\u014e\3\2\2\2\u0151"+
		"\u014f\3\2\2\2\u0152Z\3\2\2\2\u0153\u0154\t\b\2\2\u0154\\\3\2\2\2\u0155"+
		"\u0156\7p\2\2\u0156\u0157\7w\2\2\u0157\u0158\7n\2\2\u0158\u0159\7n\2\2"+
		"\u0159^\3\2\2\2\u015a\u015e\t\t\2\2\u015b\u015d\t\n\2\2\u015c\u015b\3"+
		"\2\2\2\u015d\u0160\3\2\2\2\u015e\u015c\3\2\2\2\u015e\u015f\3\2\2\2\u015f"+
		"`\3\2\2\2\u0160\u015e\3\2\2\2\u0161\u0162\4\62;\2\u0162b\3\2\2\2\u0163"+
		"\u0165\5a\61\2\u0164\u0163\3\2\2\2\u0165\u0166\3\2\2\2\u0166\u0164\3\2"+
		"\2\2\u0166\u0167\3\2\2\2\u0167d\3\2\2\2\u0168\u016a\5Q)\2\u0169\u0168"+
		"\3\2\2\2\u0169\u016a\3\2\2\2\u016a\u016b\3\2\2\2\u016b\u016c\5c\62\2\u016c"+
		"f\3\2\2\2\20\2kox|~\u0122\u0132\u013f\u0149\u0151\u015e\u0166\u0169\3"+
		"\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}