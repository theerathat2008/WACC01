---------------------------------------
OVERVIEW OF IMPLEMENTATION - FRONTEND
---------------------------------------

The implementation of the project relies on antlr4.7 generating the Visitor classes from the Lexer and Parser grammar files.

The generation of the AST Tree which is the internal representation of the input program is done in one parse of the
visitor function.

The syntactic analysis is done by antlr relying on the rules defined in the grammer files.
The semantic analysis is done in the waccVisitor class in the check function of the AST Nodes as they are generated.

----------------------------
Files and directories
----------------------------

> waccTest class <

This class creates the compiler by implementing antlr functions to generate the ParseTree.
At this point syntactic analysis is done and if there are errors, they are printed out and the program exits.

The waccVisitor is then instantiated and the AST parse tree is generated here.

> waccVisitor class <

The waccVisitor class has visitor functions for all the alternative labels from the Parser grammar file.
There are two generic templates for the visitor function.
1. The Non-Terminal Node has the structure:
    - Create the corresponding AST Node for the current visitor function
    - Set the current created AST Node as an embedded AST Node of the parent node if neccessary
    - Set the syntactic string member variable of the current node if neccessary
    - Set the ParentNode variable of the current AST Node
    - Set the member variable of the waccVisitor class which is parentVisitorNode to be the current AST Node
    - Carry out semantic anaylsis on the current node if necessary
    - Print out a debug statement
    - Visit the rest of the children nodes

2. The Terminal Node has a similar structure bar the fact that instead of visiting the children nodes,
   the parentVisitorNode will cycle up the AST Tree via accessing the ParentNode variable until it reaches
   a AST Node which has not filled its current sub-tree.


> ASTNodes directory <

The abstract AST Node class has member variable parent Node which represent the AST Node directly above the current
node in the AST Tree. It also has getters and setters for the member variables of its sub-classes for both the embedded
AST Nodes and the syntactic string member variables.

There are also helper functions such as isEmbeddedNodeFull which aid in the construction of the tree through the visitor
pattern and a print function which helps in debugging the tree.

The structure of the AST class node inheritance is as follows:

AST_Node -> AST_FuncDecl
         -> AST_Keyword
         -> AST_Param
         -> AST_ParamList
         -> AST_Program
         -> AST_Separator
         -> AST_Expr       -> AST_ExprArrayElem
                           -> AST_ExprBinary
                           -> AST_ExprEnclosed
                           -> AST_ExprIdent
                           -> AST_ExprLiter
                           -> AST_ExprUnary

         -> AST_Stat       -> AST_StatAssign
                           -> AST_StatBeginEnd
                           -> AST_StatExpr
                           -> AST_StatIf
                           -> AST_StatMult
                           -> AST_StatRead
                           -> AST_StatVarDecl
                           -> AST_StatWhile

                           -> AST_StatAssignLHS   -> AST_StatArrayElemLHS
                                                  -> AST_StatIdentLHS
                                                  -> AST_StatPairElemLHS

                           -> AST_StatAssignRHS   -> AST_StatArrayLitRHS
                                                  -> AST_StatCallRHS
                                                  -> AST_StatExprRHS
                                                  -> AST_StatNewPairRHS
                                                  -> AST_StatPairElemRHS

         -> AST_Type       -> AST_ArrayType
                           -> AST_BaseType
                           -> AST_PairType
                           -> AST_PairElemType    -> AST_ArrayTypePair
                                                  -> AST_BaseTypePair
                                                  -> AST_PairString


The non-terminal classes (Base classes) in the inheritance structure are used as holders for their subclasses.


---------------------------------------
OVERVIEW OF IMPLEMENTATION - BACKEND
---------------------------------------

The structure of the backend was to first parse using the visitor pattern through the AST_Tree generated from the front end.

Blocks of consecutive assembly code are then generated within the instruction class.

On the first parse the Set of Instructions corresponding to the AST_Nodes will be generated.
The instructions are allocated their registers in a pseudo visitor pattern.
Then the final instruction list blocks are then ordered to have the correct output.

The main handling of the process is done through the assembler class which manges the different passes of the code.

> Registers <

The register allocation is done through one main register class which is instantiated once through the singleton pattern.
The register allocation class holds various data structures corresponding to the stack implementation and register in use stack.

> InstructionSet <

The instruction classes have the abstract function genInstructions which takes the embedded information corresponding to the
specific instruction class and generates blocks of assembly code for that instruction class.
The embedded information is mainly the registers which is allocated using registerAllocation.

The Assembler class is also stored within the InstructionSet package and it handles the assembly of the code.


---------------------------------------
OVERVIEW OF IMPLEMENTATION - EXTENSION
---------------------------------------

The idea of the extension was to extend the WACC language or improve the efficiency of the compiler.

We did 4 extensions; the efficient register allocation which attempted to reduce the use of the stack and store as many variables and values in registers as possible, adding side-effecting expressions which added the uses of x++, x+=y, x = y, etc. to the language, the standard library which added a few functions that could be called by the programmer without needing to define them and constant evaluation which evaluates known binary expressions during compile time to stop it being evaluated every time the program is run.


> Efficient Register Allocation <



> Side-effecting Expressions <

This was achieved by extending the parser by adding the relevant expressions into a sub_parse which was captured by the expression category. We also had to add new AST_Nodes for each expression which involved having to add new functions to all of the visitor methods to allow the functions in the new AST_Nodes to be properly executed when the visitors were run.


> Standard Library <

Implementing the standard library involved writing function in the WACC language then running it through our compiler in order to generate the assembly code. This assembly code was then added to a new Instruction class which contained the assembly code for the library functions. When a library function was called in StatCallRhs it caused the relevant library function’s assembly code to be added to the assembly code. We were also able to make this code more efficient by hand meaning it would run faster then any function a programmer could write natively in WACC.


> Constant Evaluation <


> testExtension <

We also added a script that, when run, compiles and runs all of the wacc programs in extensionTests 
which implement the side-effecting expressions and library functions that we implemented.
It returns each programs source code, the expected output and the actual result.

